---
swagger: "2.0"
info:
  description: "This is a documention of all rest for frontend"
  version: "1.0.1"
  title: "Managment Api"
  termsOfService: "http://swagger.io/terms/"
  contact:
    name: "API Support"
    url: "http://www.swagger.io/support"
    email: "support@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
paths:
  /app/users:
    get:
      tags:
      - "User"
      description: "get All Users from mongoDB in Json"
      operationId: "appUsersGET"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/inline_response_200"
        500:
          description: "server error"
      x-swagger-router-controller: "User"
    post:
      tags:
      - "User"
      operationId: "appUsersPOST"
      parameters:
      - in: "body"
        name: "User"
        description: "The User what you want add"
        required: true
        schema:
          $ref: "#/definitions/User_1"
      responses:
        200:
          description: "Added User and password was encrypted!"
          schema:
            $ref: "#/definitions/inline_response_200_1"
        404:
          description: "Cannot find user with this ID"
      x-swagger-router-controller: "User"
  /app/users/id:
    get:
      tags:
      - "User"
      description: "get one user by ID from mongoDB in Json"
      operationId: "appUsersIdGET"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/inline_response_200_2"
        404:
          description: "Cannot find user with this ID"
      x-swagger-router-controller: "User"
    put:
      tags:
      - "User"
      description: "Updated a password or login of user ID. Must be beetwen 6-20 char.\
        \ Both can be updated"
      operationId: "appUsersIdPUT"
      parameters:
      - name: "login"
        in: "query"
        description: "The login of our user"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password of our user"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/inline_response_200_3"
        404:
          description: "Cannot find user with this ID"
      x-swagger-router-controller: "User"
    delete:
      tags:
      - "User"
      description: "Remove one user by ID from mongodb"
      operationId: "appUsersIdDELETE"
      parameters: []
      responses:
        200:
          description: "Removed!"
        404:
          description: "Cannot find user with this ID"
      x-swagger-router-controller: "User"
  /app/users/login:
    get:
      tags:
      - "Login"
      description: "get one user by ID from mongoDB in Json"
      operationId: "appUsersLoginGET"
      parameters:
      - name: "login"
        in: "query"
        description: "The login of our user"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password of our user"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
        400:
          description: "Bad login or password"
      x-swagger-router-controller: "Login"
  /app/projects:
    get:
      tags:
      - "Project"
      description: "get all project in Json"
      operationId: "appProjectsGET"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/inline_response_200_4"
        500:
          description: "server error"
      x-swagger-router-controller: "Project"
    post:
      tags:
      - "Project"
      description: "add Project"
      operationId: "appProjectsPOST"
      parameters:
      - in: "body"
        name: "Project"
        description: "The Project what you want add"
        required: true
        schema:
          $ref: "#/definitions/Project_1"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/inline_response_200_4"
        500:
          description: "server error"
      x-swagger-router-controller: "Project"
  /app/project/id:
    get:
      tags:
      - "Project"
      description: "Get one project by ID"
      operationId: "appProjectIdGET"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/inline_response_200_4"
        404:
          description: "Bad ID!"
      x-swagger-router-controller: "Project"
    put:
      tags:
      - "Project"
      description: "Updating project. This functions is only replace the properties.\
        \ For example if you send /name/ :/kasia/ it will change the last name to\
        \ this"
      operationId: "appProjectIdPUT"
      parameters:
      - name: "title"
        in: "query"
        description: "The title of project"
        required: false
        type: "string"
      - name: "price"
        in: "query"
        description: "The price of project"
        required: false
        type: "string"
      - name: "owner"
        in: "query"
        description: "The owner of project"
        required: false
        type: "string"
      - name: "teamID"
        in: "query"
        description: "The ID of project what belongs to"
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/inline_response_200_5"
        404:
          description: "Bad ID!"
      x-swagger-router-controller: "Project"
    delete:
      tags:
      - "Project"
      description: "This function is deleting project by ID"
      operationId: "appProjectIdDELETE"
      parameters: []
      responses:
        200:
          description: "Deleted"
        404:
          description: "Bad ID!"
      x-swagger-router-controller: "Project"
  /app/project/comment/id:
    put:
      tags:
      - "Project"
      description: "This functions is adding comment to the project"
      operationId: "appProjectCommentIdPUT"
      parameters:
      - name: "name"
        in: "query"
        description: "Only Name"
        required: false
        type: "string"
      - name: "authorID"
        in: "query"
        description: "ID of author"
        required: false
        type: "string"
      - name: "description"
        in: "query"
        description: "Text"
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/inline_response_200_6"
        404:
          description: "Bad ID!"
      x-swagger-router-controller: "Project"
  /app/teams:
    get:
      tags:
      - "Team"
      description: "This functions is getting all Teams"
      operationId: "appTeamsGET"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/inline_response_200_7"
        500:
          description: "server error"
      x-swagger-router-controller: "Team"
    post:
      tags:
      - "Team"
      description: "This functions is adding team"
      operationId: "appTeamsPOST"
      parameters:
      - name: "name"
        in: "query"
        description: "Only Name"
        required: false
        type: "string"
      - name: "users"
        in: "query"
        description: "All users to add in team this will be array"
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/inline_response_200_8"
        404:
          description: "Cannot add user to  team which ID doesn't exist"
      x-swagger-router-controller: "Team"
  /app/teams/id:
    put:
      tags:
      - "Team"
      description: "This functions is adding user to the team"
      operationId: "appTeamsIdPUT"
      parameters:
      - name: "spec"
        in: "query"
        description: "Technology which is know ex.(backend)"
        required: true
        type: "string"
      - name: "userID"
        in: "query"
        description: "User ID from database"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/inline_response_200_9"
        404:
          description: "Cannot add User which ID doesn't exist"
      x-swagger-router-controller: "Team"
    delete:
      tags:
      - "Team"
      description: "This functions is removing team from db"
      operationId: "appTeamsIdDELETE"
      parameters: []
      responses:
        200:
          description: "Removed!"
        404:
          description: "Cannot remove Team which ID doesn't exist"
      x-swagger-router-controller: "Team"
  /app/teams/deleteUser/:id:
    put:
      tags:
      - "Team"
      description: "This functions is removing user from the team"
      operationId: "appTeamsDeleteUseridPUT"
      parameters:
      - name: "spec"
        in: "query"
        description: "Technology which is know ex.(backend)"
        required: true
        type: "string"
      - name: "userID"
        in: "query"
        description: "User ID from database"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/inline_response_200_10"
        404:
          description: "Cannot remove user from team which ID doesn't exist"
      x-swagger-router-controller: "Team"
  /app/teams/update/id:
    put:
      tags:
      - "Team"
      description: "Updating project. This functions is only replace the properties.\
        \ For example if you send /name/ :/kasia/ it will change the last name to\
        \ this"
      operationId: "appTeamsUpdateIdPUT"
      parameters:
      - name: "name"
        in: "query"
        description: "The title of project"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/inline_response_200_11"
        404:
          description: "Bad ID!"
      x-swagger-router-controller: "Team"
definitions:
  User:
    type: "object"
    properties:
      login:
        type: "string"
      password:
        type: "string"
  Team:
    type: "object"
    properties:
      name:
        type: "string"
      users:
        type: "array"
  Project:
    type: "object"
    properties:
      title:
        type: "string"
      price:
        type: "number"
      owner:
        type: "string"
      teamID:
        type: "string"
  inline_response_200:
    properties:
      login:
        type: "string"
        example: "Dawid"
      password:
        type: "string"
        example: "prypke4567"
  User_1:
    type: "object"
    properties:
      login:
        type: "string"
      password:
        type: "string"
  inline_response_200_1:
    properties:
      id:
        type: "string"
        example: "23v4g23423hn23jh423j42"
      login:
        type: "string"
        example: "Dawid"
      password:
        type: "string"
        example: "v234v5234v5324v5234v5324"
  inline_response_200_2:
    properties:
      id:
        type: "string"
        example: "v234v5234v5234"
      login:
        type: "string"
        example: "Dawid"
      password:
        type: "string"
        example: "prypke4567"
  inline_response_200_3:
    properties:
      login:
        type: "string"
        example: "new login"
      password:
        type: "string"
        example: "new password"
  inline_response_200_4:
    properties:
      'title:':
        type: "string"
        example: "The name of project"
      price:
        type: "string"
        example: "The price of project"
      createdData:
        type: "string"
        example: "2017/06/24 15:27"
      onwer:
        type: "string"
        example: "The user which project belongs to"
      teamID:
        type: "string"
        example: "The ID of team which user Belongs to"
      comments:
        type: "array"
  Project_1:
    type: "object"
    properties:
      title:
        type: "string"
      price:
        type: "number"
      owner:
        type: "string"
      teamID:
        type: "string"
  inline_response_200_5:
    properties:
      'title:':
        type: "string"
        example: "The new title"
      price:
        type: "string"
        example: "The new price"
      createdData:
        type: "string"
        example: "2017/06/24 15:27"
      onwer:
        type: "string"
        example: "The new owner!"
      teamID:
        type: "string"
        example: "The new teamID which project belongs to!"
      comments:
        type: "array"
  inline_response_200_6:
    properties:
      'title:':
        type: "string"
        example: "The new title"
      price:
        type: "string"
        example: "The new price"
      createdData:
        type: "string"
        example: "2017/06/24 15:27"
      onwer:
        type: "string"
        example: "The new owner!"
      teamID:
        type: "string"
        example: "The new teamID which project belongs to!"
      comments:
        type: "array"
        example:
          name: "Jasiek"
          authorID: "3346h345h6345"
          desciption: "Your project is no bad!"
  inline_response_200_7:
    properties:
      'id:':
        type: "string"
        example: "54h23jh2345h2345h2"
      name:
        type: "string"
        example: "Avengers"
      users:
        type: "array"
        example:
          personId: "324g23h23h42"
          firstName: "Kasia"
  inline_response_200_8:
    properties:
      id:
        type: "string"
        example: "54h23jh2345h2345h2"
      name:
        type: "string"
        example: "Avengers"
      users:
        type: "array"
        items:
          type: "object"
          properties: {}
  inline_response_200_9:
    properties:
      id:
        type: "string"
        example: "54h23jh2345h2345h2"
      name:
        type: "string"
        example: "Avengers"
      users:
        type: "array"
        example:
          personId: "324g23h23h42"
          spec: "backend"
  inline_response_200_10:
    properties:
      id:
        type: "string"
        example: "54h23jh2345h2345h2"
      name:
        type: "string"
        example: "Avengers"
      users:
        type: "array"
  inline_response_200_11:
    properties:
      'name:':
        type: "string"
        example: "The new name"
      users:
        type: "array"
        example:
          userId: "g534g524g54g5"
          spec: "backend"
