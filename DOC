swagger: "2.0"
info:
  description: |
    Api by SurpriseDesign
  version: "0.9"
  title: Api by SurpriseDesign
  termsOfService: http://helloreverb.com/terms/
  contact:
    name: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
host: "localhost:8080"
basePath: /app
schemes:
  - http
paths:
  /users/:
    post:
      tags:
      - User
      summary: add User
      description: ""
      produces:
      - application/json
      parameters:
        - name: "User"
          in: "body"
          description: "add User"
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: "Added"
        '400':
          description: "loggin or password is incorect"

    get:
       tags:
        - User
       summary: "get All users"
       responses:
          '200':
            description: "ok"
            schema:
              properties:
                login:
                  type: string
                  example : "Marek"
                password:
                  type: string
                  example: "3fg5h2jh2"
          '500':
            description: "server error"
  
  /users/{userID}:
    get:
      tags:
        - User
      summary: "Find one User by ID"
      description: ""
      parameters:
        - in: path
          name: userID
          description: ID of pet that needs to be fetched
          required: true
          type: string
      responses:
        "200":
          description: "OK"
          schema:
            properties:
              id:
                type: string
                example: "34f523h23h53"
              login:
                type: string
                example : "Marek"
              password:
                type: string
                example: "3fg5h2jh2"
                
        "404":
          description: "Cannot find user witch  this ID"
          
    put:
      tags:
        - User
      summary: "Update login or password"
      description: ""
      parameters:
        - name: "User"
          in: "body"
          description: "add User"
          required: true
          schema:
            $ref: '#/definitions/User'
        - in: path
          name: userID
          description: "User ID to update"
          required: true
          type: string
      responses:
        "200":
          description: "OK"
          schema:
            properties:
              id:
                type: string
                example: "34f523h23h53"
              login:
                type: string
                example : "new login"
              password:
                type: string
                example: "new password"
                
        "404":
          description: "Cannot find user with this ID"
        
    delete:
      tags:
        - User
      summary: "Delete user"
      description: ""
      parameters:
       - in: path
         name: userID
         description: ID of pet that needs to be fetched
         required: true
         type: string
      responses:
        "200":
          description: "Deleted"
        "404":
          description: "Cannot find user with this ID"
          
    
        
          
  /login:
    post:
      tags:
        - Login
      summary: "Login to Api"
      description: ""
      parameters:
        - name: "User"
          in: "body"
          description: "add User"
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        "200":
          description : ""
          schema:
              properties:
                id:
                  type: string
                  example: "34f523h23h53"
                login:
                  type: string
                  example : "logged"
                password:
                  type: string
                  example: "prypeser"
        "400":
          description: "Bad login or password"
    
          
  
  /projects:
  
    get:
       tags:
        - Project
       summary: "get All Project"
       responses:
          '200':
            description: "ok"
            schema:
              properties:
                title:
                  type: string
                  example : "Workers"
                price:
                  type: number
                  example: "2000"
                createdData:
                  type: string
                  example: "2017-06-25- 1:18"
                owner:
                  type: string
                  example: "Dawid"
                teamID:
                  type: string
                  example: "34h6j3434h634"
                comments:
                  type: array
                  items:
                   type: object
                   properties:
                      name:
                        type: string
                        example: "Kasia"
                      authorID:
                        type: string
                        example: "e244542352345"
                      description:
                        type: string
                        example: "Not bad project."
                        
          '500':
            description: "server error"  
  
  
  
    post:
       tags:
        - Project
       summary: "add Project"
       parameters:
        - name: "User"
          in: "body"
          description: "add Project"
          required: true
          schema:
            $ref: '#/definitions/Project'
       responses:
          '200':
            description: "ok"
            schema:
              properties:
                title:
                  type: string
                  example : "Workers"
                price:
                  type: number
                  example: "2000"
                createdData:
                  type: string
                  example: "2017-06-25- 1:18"
                owner:
                  type: string
                  example: "Dawid"
                teamID:
                  type: string
                  example: "34h6j3434h634"
                comments:
                  type: array
                  items:
                   type: object
                   properties:
                      description:
                        type: string
                        example: "This comment is only example it doesn't exist"
                  
          '500':
            description: "server error"  
          
  /projects/{projectID}:
    get:
       tags:
        - Project
       summary: "get one project by ID"
       parameters:
        - in: path
          name: projectID
          description: "Project ID"
          required: true
          type: string
       responses:
          '200':
            description: "ok"
            schema:
              properties:
                title:
                  type: string
                  example : "Workers"
                price:
                  type: number
                  example: "2000"
                createdData:
                  type: string
                  example: "2017-06-25- 1:18"
                owner:
                  type: string
                  example: "Dawid"
                teamID:
                  type: string
                  example: "34h6j3434h634"
                comments:
                  type: array
                  items:
                   type: object
                   properties:
                      name:
                       type: string
                       example: "example name"
                      authorID:
                       type: string
                       example: "example authorID"
                      description:
                       type: string
                       example: "description"
                    
          '404':
            description: "Cannot find project with this ID"
            
    delete:
       tags:
        - Project
       summary: "Delete project"
       parameters:
        - in: path
          name: projectID
          description: ID of pet that needs to be fetched
          required: true
          type: string
       responses:
          '200':
            description: "ok"
          '404':
            description: "Cannot find project with this ID"
            
            
            
    put:
       tags:
        - Project
       summary: "Update Project. Only replace properties"
       parameters:
        - name: "User"
          in: "body"
          description: "update project"
          required: true
          schema:
            $ref: '#/definitions/Project'
        - in: path
          name: projectID
          description: "ID of project to be update"
          required: true
          type: string
       responses:
          '200':
            description: "ok"
            schema:
              properties:
                title:
                  type: string
                  example : "new title"
                price:
                  type: number
                  example: "4000"
                createdData:
                  type: string
                  example: "2017-06-25- 1:18"
                owner:
                  type: string
                  example: "new owner"
                teamID:
                  type: string
                  example: "new teamID"
                comments:
                  type: array
                  items:
                   type: object
                   properties:
                      name:
                       type: string
                       example: "example name"
                      authorID:
                       type: string
                       example: "example authorID"
                      description:
                       type: string
                       example: "description"
          '404':
            description: "Cannot find project witch this ID"  
          
  /project/comment/{projectID}:
    put:
       tags:
        - Project
       summary: "Add Comment"
       parameters:
        - name: "Comment"
          in: "body"
          description: "add Comment"
          required: true
          schema:
            $ref: '#/definitions/Comment'
        - in: path
          name: projectID
          description: "ID project to add comment"
          required: true
          type: string
       responses:
          '200':
            description: "ok"
            schema:
              properties:
                title:
                  type: string
                  example : "Workers"
                price:
                  type: number
                  example: "2000"
                createdData:
                  type: string
                  example: "2017-06-25- 1:18"
                owner:
                  type: string
                  example: "Dawid"
                teamID:
                  type: string
                  example: "34h6j3434h634"
                comments:
                  type: array
                  items:
                   type: object
                   properties:
                      name:
                       type: string
                       example: "given name"
                      authorID:
                       type: string
                       example: "given authorID"
                      description:
                       type: string
                       example: "given description"
          '404':
            description: "Cannot find project witch this ID"
  
    delete:
       tags:
        - Project
       summary: "delete Comment"
       parameters:
        - name: "Comment"
          in: "body"
          description: "delete Comment"
          required: true
          schema:
            $ref: '#/definitions/Comment'
        - in: path
          name: projectID
          description: "ID project to delete comment"
          required: true
          type: string
       responses:
          '200':
            description: "Deleted"
            schema:
              properties:
                title:
                  type: string
                  example : "Workers"
                price:
                  type: number
                  example: "2000"
                createdData:
                  type: string
                  example: "2017-06-25- 1:18"
                owner:
                  type: string
                  example: "Dawid"
                teamID:
                  type: string
                  example: "34h6j3434h634"
                comments:
                  type: array
                  items:
                   type: object
                   properties:
                      name:
                       type: string
                       example: "delete  name"
                      authorID:
                       type: string
                       example: "delete  authorID"
                      description:
                       type: string
                       example: "delete  description"
          '404':
            description: "Cannot find project witch this ID"
            
  
          
  /teams:
   get:
       tags:
        - Team
       summary: "get all teams"
       responses:
          '200':
            description: "ok"
            schema:
              properties:
                name:
                  type: string
                  example : "Workers"
                users:
                  type: array
                  items:
                   type: object
                   properties:
                      spec:
                       type: string
                       example: "backend"
                      userID:
                       type: string
                       example: "t5465t546546t"
                      
          '500':
            description: "server error"
            
   post:
       tags:
        - Team
       summary: "Add Team"
       parameters:
        - name: "Comment"
          in: "body"
          description: "add Comment"
          required: true
          schema:
            $ref: '#/definitions/Team'
       responses:
          '200':
            description: "ok"
            schema:
              properties:
                name:
                  type: string
                  example : "Workers"
                users:
                  type: array
                  items: {
                    type: object
                  }
                  example:
                    spec: "tech"
                    userID: "45ggjh73k876"
          '400':
            description: "At least of userID is incorrect"
          
  /teams/{teamID}:
     delete:
      tags:
        - Team
      summary: "Delete team"
      description: ""
      parameters:
        - in: path
          name: teamID
          description: "ID of to delete"
          required: true
          type: string
      responses:
          '200':
            description: "Deleted"
            
          '404':
            description: "Team with given ID doesn't exist"
            
     put:
       tags:
        - Team
       summary: "Add user to team"
       parameters:
        - name: "User"
          in: "body"
          description: "User to remove"
          required: true
          schema:
            $ref: '#/definitions/UserToTeam'
        - in: path
          name: teamID
          description: "ID of team to add user"
          required: true
          type: string
       responses:
          '200':
            description: "Added user to team"
            schema:
              properties:
                name:
                  type: string
                  example : "Workers"
                users:
                  type: array
                  items: {
                    type: object
                  }
                  example:
                    spec: "tech"
                    userID: "45ggjh73k876"
          '400':
            description: "userID is incorect"
          "404":
            description: "Cannot find team with given ID"    
          
        
  /teams/deleteUser/{teamID}:
      put:
       tags:
        - Team
       summary: "Remove user from team"
       parameters:
        - name: "User"
          in: "body"
          description: "User to remove"
          required: true
          schema:
            $ref: '#/definitions/UserToTeam'
        - in: path
          name: teamID
          description: "ID of team to delete User"
          required: true
          type: string
       responses:
          '200':
            description: "deleted user from team"
          '400':
            description: "userID is incorrect or log or pas"
          "404":
            description: "Cannot find team with given ID"
            
          
          
  /teams/update/{teamID}:
    put:
      tags:
        - Team
      summary: "Update, replace name"
      description: "j"
      parameters:
        - name: "Team"
          in: "body"
          description: "update name of Team"
          required: true
          schema:
            $ref: '#/definitions/name'
        - in: path
          name: teamID
          description: "ID of team to update"
          required: true
          type: string
      responses:
          '200':
            description: "ok"
            schema:
              properties:
                name:
                  type: string
                  example : "new Name"
                users:
                  type: array
                  items: {
                    type: object
                  }
                  example:
                    spec: "tech"
                    userID: "45ggjh73k876"
          '404':
            description: "Team with given ID doesn't exist"
          
      
        
          
          
  
    
      
definitions:
  User:
    type: object
    properties:
      login:
        type: string
      password:
        type: string
        
  UserToTeam:
    type: object
    properties:
      spec:
        type: string
      userID:
        type: string
      
  
  Comment:
    type: object
    properties:
      name:
        type: string
      authorID:
        type: string
      description:
        type: string
        
  Team:
    type: object
    properties:
      name:
        type: string
      users:
        type: array
        items:
         type: object
         properties:
          spec:
            type: string
          userID:
            type: string
  
  Project:
    type: object
    properties:
      title:
        type: string
      price:
        type: string
      owner:
        type: string
      teamID:
        type: string
        
  name:
    type: object
    properties:
        name:
         type: string
        


        
        
        
        
        
        
        
        
        
